import test from 'https://esm.sh/tape@5.9.0'
import {
	pubKeyCredParams,
	creationOptionsToJSON,
	requestOptionsToJSON,
	parseCreationOptionsFromJSON,
	parseRequestOptionsFromJSON,
	assertionToJSON,
	assertionFromJSON,
	attestationToJSON,
	attestationFromJSON,
} from './index.js'

test('`pubKeyCredParams`', (t) => {
	t.deepEqual(pubKeyCredParams, [
		{alg: -8, type: 'public-key'}, // EdDSA
		{alg: -7, type: 'public-key'}, // ES256
		{alg: -257, type: 'public-key'}, // RS256
	])
	t.end()
})

test('`creationOptionsToJSON`', (t) => {
	t.deepEqual(
		creationOptionsToJSON({}),
		{
			authenticatorSelection: {residentKey: undefined},
			challenge: undefined,
			pubKeyCredParams: undefined,
			rp: undefined,
			user: {name: undefined, displayName: undefined, id: undefined},
		},
		'with no values provided',
	)
	t.deepEqual(
		creationOptionsToJSON({
			authenticatorSelection: {residentKey: true},
			challenge: Uint8Array.from([1, 2, 3, 4]),
			pubKeyCredParams: [{alg: -8, type: 'public-key'}],
			rp: 'example.com',
			user: {
				name: 'Foo',
				displayName: 'Bar',
				id: Uint8Array.from([5, 6, 7, 8]),
			},
		}),
		{
			authenticatorSelection: {residentKey: true},
			challenge: 'AQIDBA',
			pubKeyCredParams: [{alg: -8, type: 'public-key'}],
			rp: 'example.com',
			user: {
				name: 'Foo',
				displayName: 'Bar',
				id: 'BQYHCA',
			},
		},
		'with all values provided',
	)
	t.end()
})

test('`parseCreationOptionsFromJSON`', (t) => {
	t.deepEqual(
		parseCreationOptionsFromJSON({}),
		{
			authenticatorSelection: {residentKey: undefined},
			challenge: undefined,
			pubKeyCredParams: undefined,
			rp: undefined,
			user: {name: undefined, displayName: undefined, id: undefined},
		},
		'with no values provided',
	)
	t.deepEqual(
		parseCreationOptionsFromJSON({
			authenticatorSelection: {residentKey: true},
			challenge: 'AQIDBA',
			pubKeyCredParams: [{alg: -8, type: 'public-key'}],
			rp: 'example.com',
			user: {
				name: 'Foo',
				displayName: 'Bar',
				id: 'BQYHCA',
			},
		}),
		{
			authenticatorSelection: {residentKey: true},
			challenge: Uint8Array.from([1, 2, 3, 4]),
			pubKeyCredParams: [{alg: -8, type: 'public-key'}],
			rp: 'example.com',
			user: {
				name: 'Foo',
				displayName: 'Bar',
				id: Uint8Array.from([5, 6, 7, 8]),
			},
		},
		'with all values provided',
	)
	t.end()
})

test('`requestOptionsToJSON`', (t) => {
	t.deepEqual(
		requestOptionsToJSON({}),
		{
			allowCredentials: undefined,
			challenge: undefined,
			extensions: undefined,
			hints: undefined,
			rpId: undefined,
			timeout: undefined,
			userVerification: undefined,
		},
		'with no values provided',
	)
	t.deepEqual(
		requestOptionsToJSON({
			allowCredentials: [
				{
					id: Uint8Array.from([5, 6, 7, 8]),
					transports: ['ble', 'nfc'],
					type: 'public-key',
				},
			],
			challenge: Uint8Array.from([1, 2, 3, 4]),
			extensions: {
				foo: 'bar',
			},
			hints: ['hybrid'],
			rpId: 'example.com',
			timeout: 12000,
			userVerification: 'preferred',
		}),
		{
			allowCredentials: [
				{
					id: 'BQYHCA',
					transports: ['ble', 'nfc'],
					type: 'public-key',
				},
			],
			challenge: 'AQIDBA',
			extensions: {
				foo: 'bar',
			},
			hints: ['hybrid'],
			rpId: 'example.com',
			timeout: 12000,
			userVerification: 'preferred',
		},
		'with all values provided',
	)
	t.end()
})

test('`parseRequestOptionsFromJSON`', (t) => {
	t.deepEqual(
		parseRequestOptionsFromJSON({}),
		{
			allowCredentials: undefined,
			challenge: undefined,
			extensions: undefined,
			hints: undefined,
			rpId: undefined,
			timeout: undefined,
			userVerification: undefined,
		},
		'with no values provided',
	)
	t.deepEqual(
		parseRequestOptionsFromJSON({
			allowCredentials: [
				{
					id: 'BQYHCA',
					transports: ['ble', 'nfc'],
					type: 'public-key',
				},
			],
			challenge: 'AQIDBA',
			extensions: {
				foo: 'bar',
			},
			hints: ['hybrid'],
			rpId: 'example.com',
			timeout: 12000,
			userVerification: 'preferred',
		}),
		{
			allowCredentials: [
				{
					id: Uint8Array.from([5, 6, 7, 8]),
					transports: ['ble', 'nfc'],
					type: 'public-key',
				},
			],
			challenge: Uint8Array.from([1, 2, 3, 4]),
			extensions: {
				foo: 'bar',
			},
			hints: ['hybrid'],
			rpId: 'example.com',
			timeout: 12000,
			userVerification: 'preferred',
		},
		'with all values provided',
	)
	t.end()
})

test('`assertionToJSON`', (t) => {
	t.deepEqual(
		assertionToJSON({
			id: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			rawId: new Uint8Array([
				0xa9, 0x41, 0x74, 0xdc, 0x3a, 0x83, 0x87, 0xc2, 0xa6, 0xec,
				0x25, 0x2b, 0x41, 0x43, 0x8a, 0xeb, 0x3a, 0xeb, 0xa6, 0x6e,
				0xfd, 0x10, 0x83, 0x91, 0xdf, 0x50, 0xcc, 0x0e, 0xd1, 0x16,
				0xf7, 0x11,
			]),
			response: {
				authenticatorData: new Uint8Array([
					0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68, 0x74, 0x34,
					0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b, 0x8f, 0xe4, 0xae, 0xb9,
					0xa2, 0x86, 0x32, 0xc7, 0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d,
					0x97, 0x63, 0x05, 0x00, 0x00, 0x00, 0x02,
				]),
				clientDataJSON: new Uint8Array([
					0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x77,
					0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x67, 0x65,
					0x74, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
					0x6e, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x74, 0x6e, 0x30,
					0x38, 0x79, 0x61, 0x4a, 0x30, 0x66, 0x72, 0x71, 0x65, 0x78,
					0x2d, 0x77, 0x4e, 0x63, 0x43, 0x49, 0x4b, 0x77, 0x22, 0x2c,
					0x22, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x3a, 0x22,
					0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63,
					0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x34, 0x35, 0x30,
					0x37, 0x22, 0x2c, 0x22, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x4f,
					0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x3a, 0x66, 0x61, 0x6c,
					0x73, 0x65, 0x2c, 0x22, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
					0x6b, 0x65, 0x79, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x62,
					0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x68, 0x65,
					0x72, 0x65, 0x22, 0x3a, 0x22, 0x64, 0x6f, 0x20, 0x6e, 0x6f,
					0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x20,
					0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
					0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e,
					0x73, 0x74, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6c,
					0x61, 0x74, 0x65, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x68,
					0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x6f, 0x6f,
					0x2e, 0x67, 0x6c, 0x2f, 0x79, 0x61, 0x62, 0x50, 0x65, 0x78,
					0x22, 0x7d,
				]),
				signature: new Uint8Array([
					0x77, 0x27, 0xcd, 0xfc, 0x2a, 0x0c, 0x3e, 0x28, 0xc6, 0x57,
					0x28, 0x81, 0xcb, 0x95, 0x1d, 0x7d, 0xee, 0x81, 0x73, 0x4f,
					0x61, 0xbd, 0x17, 0x9d, 0x8e, 0x90, 0x5d, 0x54, 0xca, 0xf7,
					0x0f, 0x6f, 0x8f, 0x54, 0xf9, 0x2d, 0xfe, 0x59, 0x95, 0xc0,
					0x70, 0x69, 0xea, 0xaa, 0x4c, 0x0c, 0x8f, 0xe6, 0x25, 0xc7,
					0xa2, 0xea, 0x78, 0x89, 0xc7, 0x2a, 0x9b, 0x31, 0x0b, 0xd0,
					0x67, 0x3c, 0x2f, 0x02,
				]),
				userHandle: new Uint8Array([
					0xb0, 0xa5, 0x43, 0xfc, 0x19, 0xe8, 0x4a, 0x98, 0xbb, 0x19,
					0x46, 0xb1, 0xa2, 0x4f, 0x44, 0x14,
				]),
			},
			authenticatorAttachment: 'platform',
			clientExtensionResults: {},
			type: 'public-key',
		}),
		{
			id: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			rawId: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			response: {
				authenticatorData:
					'SZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2MFAAAAAg',
				clientDataJSON:
					'eyJ0eXBlIjoid2ViYXV0aG4uZ2V0IiwiY2hhbGxlbmdlIjoidHRuMDh5YUowZnJxZXgtd05jQ0lLdyIsIm9yaWdpbiI6Imh0dHA6Ly9sb2NhbGhvc3Q6NDUwNyIsImNyb3NzT3JpZ2luIjpmYWxzZSwib3RoZXJfa2V5c19jYW5fYmVfYWRkZWRfaGVyZSI6ImRvIG5vdCBjb21wYXJlIGNsaWVudERhdGFKU09OIGFnYWluc3QgYSB0ZW1wbGF0ZS4gU2VlIGh0dHBzOi8vZ29vLmdsL3lhYlBleCJ9',
				signature:
					'dyfN_CoMPijGVyiBy5Udfe6Bc09hvRedjpBdVMr3D2-PVPkt_lmVwHBp6qpMDI_mJcei6niJxyqbMQvQZzwvAg',
				userHandle: 'sKVD_BnoSpi7GUaxok9EFA',
			},
			authenticatorAttachment: 'platform',
			clientExtensionResults: {},
			type: 'public-key',
		},
	)
	t.end()
})

test('`assertionFromJSON`', (t) => {
	t.deepEqual(
		assertionFromJSON({
			id: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			rawId: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			response: {
				authenticatorData:
					'SZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2MFAAAAAg',
				clientDataJSON:
					'eyJ0eXBlIjoid2ViYXV0aG4uZ2V0IiwiY2hhbGxlbmdlIjoidHRuMDh5YUowZnJxZXgtd05jQ0lLdyIsIm9yaWdpbiI6Imh0dHA6Ly9sb2NhbGhvc3Q6NDUwNyIsImNyb3NzT3JpZ2luIjpmYWxzZSwib3RoZXJfa2V5c19jYW5fYmVfYWRkZWRfaGVyZSI6ImRvIG5vdCBjb21wYXJlIGNsaWVudERhdGFKU09OIGFnYWluc3QgYSB0ZW1wbGF0ZS4gU2VlIGh0dHBzOi8vZ29vLmdsL3lhYlBleCJ9',
				signature:
					'dyfN_CoMPijGVyiBy5Udfe6Bc09hvRedjpBdVMr3D2-PVPkt_lmVwHBp6qpMDI_mJcei6niJxyqbMQvQZzwvAg',
				userHandle: 'sKVD_BnoSpi7GUaxok9EFA',
			},
			authenticatorAttachment: 'platform',
			clientExtensionResults: {},
			type: 'public-key',
		}),
		{
			id: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			rawId: new Uint8Array([
				0xa9, 0x41, 0x74, 0xdc, 0x3a, 0x83, 0x87, 0xc2, 0xa6, 0xec,
				0x25, 0x2b, 0x41, 0x43, 0x8a, 0xeb, 0x3a, 0xeb, 0xa6, 0x6e,
				0xfd, 0x10, 0x83, 0x91, 0xdf, 0x50, 0xcc, 0x0e, 0xd1, 0x16,
				0xf7, 0x11,
			]),
			response: {
				authenticatorData: new Uint8Array([
					0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68, 0x74, 0x34,
					0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b, 0x8f, 0xe4, 0xae, 0xb9,
					0xa2, 0x86, 0x32, 0xc7, 0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d,
					0x97, 0x63, 0x05, 0x00, 0x00, 0x00, 0x02,
				]),
				clientDataJSON: new Uint8Array([
					0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x77,
					0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x67, 0x65,
					0x74, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
					0x6e, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x74, 0x6e, 0x30,
					0x38, 0x79, 0x61, 0x4a, 0x30, 0x66, 0x72, 0x71, 0x65, 0x78,
					0x2d, 0x77, 0x4e, 0x63, 0x43, 0x49, 0x4b, 0x77, 0x22, 0x2c,
					0x22, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x3a, 0x22,
					0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63,
					0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x34, 0x35, 0x30,
					0x37, 0x22, 0x2c, 0x22, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x4f,
					0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x3a, 0x66, 0x61, 0x6c,
					0x73, 0x65, 0x2c, 0x22, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
					0x6b, 0x65, 0x79, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x62,
					0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x68, 0x65,
					0x72, 0x65, 0x22, 0x3a, 0x22, 0x64, 0x6f, 0x20, 0x6e, 0x6f,
					0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x20,
					0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
					0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e,
					0x73, 0x74, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6c,
					0x61, 0x74, 0x65, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x68,
					0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x6f, 0x6f,
					0x2e, 0x67, 0x6c, 0x2f, 0x79, 0x61, 0x62, 0x50, 0x65, 0x78,
					0x22, 0x7d,
				]),
				signature: new Uint8Array([
					0x77, 0x27, 0xcd, 0xfc, 0x2a, 0x0c, 0x3e, 0x28, 0xc6, 0x57,
					0x28, 0x81, 0xcb, 0x95, 0x1d, 0x7d, 0xee, 0x81, 0x73, 0x4f,
					0x61, 0xbd, 0x17, 0x9d, 0x8e, 0x90, 0x5d, 0x54, 0xca, 0xf7,
					0x0f, 0x6f, 0x8f, 0x54, 0xf9, 0x2d, 0xfe, 0x59, 0x95, 0xc0,
					0x70, 0x69, 0xea, 0xaa, 0x4c, 0x0c, 0x8f, 0xe6, 0x25, 0xc7,
					0xa2, 0xea, 0x78, 0x89, 0xc7, 0x2a, 0x9b, 0x31, 0x0b, 0xd0,
					0x67, 0x3c, 0x2f, 0x02,
				]),
				userHandle: new Uint8Array([
					0xb0, 0xa5, 0x43, 0xfc, 0x19, 0xe8, 0x4a, 0x98, 0xbb, 0x19,
					0x46, 0xb1, 0xa2, 0x4f, 0x44, 0x14,
				]),
			},
			authenticatorAttachment: 'platform',
			clientExtensionResults: {},
			type: 'public-key',
		},
	)
	t.end()
})

test('`attestationToJSON`', (t) => {
	t.deepEqual(
		attestationToJSON({
			id: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			rawId: new Uint8Array([
				0xa9, 0x41, 0x74, 0xdc, 0x3a, 0x83, 0x87, 0xc2, 0xa6, 0xec,
				0x25, 0x2b, 0x41, 0x43, 0x8a, 0xeb, 0x3a, 0xeb, 0xa6, 0x6e,
				0xfd, 0x10, 0x83, 0x91, 0xdf, 0x50, 0xcc, 0x0e, 0xd1, 0x16,
				0xf7, 0x11,
			]),
			response: {
				attestationObject: new Uint8Array([
					0xa3, 0x63, 0x66, 0x6d, 0x74, 0x64, 0x6e, 0x6f, 0x6e, 0x65,
					0x67, 0x61, 0x74, 0x74, 0x53, 0x74, 0x6d, 0x74, 0xa0, 0x68,
					0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x58, 0x81,
					0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68, 0x74, 0x34,
					0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b, 0x8f, 0xe4, 0xae, 0xb9,
					0xa2, 0x86, 0x32, 0xc7, 0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d,
					0x97, 0x63, 0x45, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x03,
					0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04, 0x05,
					0x06, 0x07, 0x08, 0x00, 0x20, 0xa9, 0x41, 0x74, 0xdc, 0x3a,
					0x83, 0x87, 0xc2, 0xa6, 0xec, 0x25, 0x2b, 0x41, 0x43, 0x8a,
					0xeb, 0x3a, 0xeb, 0xa6, 0x6e, 0xfd, 0x10, 0x83, 0x91, 0xdf,
					0x50, 0xcc, 0x0e, 0xd1, 0x16, 0xf7, 0x11, 0xa4, 0x01, 0x01,
					0x03, 0x27, 0x20, 0x06, 0x21, 0x58, 0x20, 0x2f, 0xb9, 0xa2,
					0x96, 0x1f, 0xad, 0x6f, 0x2b, 0x97, 0x0b, 0x00, 0x81, 0xb6,
					0x02, 0x31, 0x0a, 0x06, 0x40, 0xe8, 0x73, 0x1d, 0x57, 0xc7,
					0x7a, 0x61, 0xa0, 0x52, 0x0b, 0xf2, 0xc5, 0xc4, 0xde,
				]),
				clientDataJSON: new Uint8Array([
					0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x77,
					0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x63, 0x72,
					0x65, 0x61, 0x74, 0x65, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x61,
					0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x67,
					0x44, 0x62, 0x66, 0x35, 0x49, 0x43, 0x49, 0x76, 0x33, 0x62,
					0x49, 0x4d, 0x5f, 0x63, 0x70, 0x47, 0x61, 0x48, 0x76, 0x6c,
					0x77, 0x22, 0x2c, 0x22, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
					0x22, 0x3a, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
					0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a,
					0x34, 0x35, 0x30, 0x37, 0x22, 0x2c, 0x22, 0x63, 0x72, 0x6f,
					0x73, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x3a,
					0x66, 0x61, 0x6c, 0x73, 0x65, 0x7d,
				]),
				getAuthenticatorData: () =>
					new Uint8Array([
						0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68, 0x74,
						0x34, 0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b, 0x8f, 0xe4,
						0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7, 0x99, 0x5c, 0xf3,
						0xba, 0x83, 0x1d, 0x97, 0x63, 0x45, 0x00, 0x00, 0x00,
						0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
						0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x00,
						0x20, 0xa9, 0x41, 0x74, 0xdc, 0x3a, 0x83, 0x87, 0xc2,
						0xa6, 0xec, 0x25, 0x2b, 0x41, 0x43, 0x8a, 0xeb, 0x3a,
						0xeb, 0xa6, 0x6e, 0xfd, 0x10, 0x83, 0x91, 0xdf, 0x50,
						0xcc, 0x0e, 0xd1, 0x16, 0xf7, 0x11, 0xa4, 0x01, 0x01,
						0x03, 0x27, 0x20, 0x06, 0x21, 0x58, 0x20, 0x2f, 0xb9,
						0xa2, 0x96, 0x1f, 0xad, 0x6f, 0x2b, 0x97, 0x0b, 0x00,
						0x81, 0xb6, 0x02, 0x31, 0x0a, 0x06, 0x40, 0xe8, 0x73,
						0x1d, 0x57, 0xc7, 0x7a, 0x61, 0xa0, 0x52, 0x0b, 0xf2,
						0xc5, 0xc4, 0xde,
					]),
				getPublicKey: () =>
					new Uint8Array([
						0x30, 0x2a, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x70,
						0x03, 0x21, 0x00, 0x2f, 0xb9, 0xa2, 0x96, 0x1f, 0xad,
						0x6f, 0x2b, 0x97, 0x0b, 0x00, 0x81, 0xb6, 0x02, 0x31,
						0x0a, 0x06, 0x40, 0xe8, 0x73, 0x1d, 0x57, 0xc7, 0x7a,
						0x61, 0xa0, 0x52, 0x0b, 0xf2, 0xc5, 0xc4, 0xde,
					]),
				getPublicKeyAlgorithm: () => -8,
				getTransports: () => ['internal'],
			},
			authenticatorAttachment: 'platform',
			clientExtensionResults: {},
			type: 'public-key',
		}),
		{
			id: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			rawId: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			response: {
				attestationObject:
					'o2NmbXRkbm9uZWdhdHRTdG10oGhhdXRoRGF0YViBSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAAQECAwQFBgcIAQIDBAUGBwgAIKlBdNw6g4fCpuwlK0FDius666Zu_RCDkd9QzA7RFvcRpAEBAycgBiFYIC-5opYfrW8rlwsAgbYCMQoGQOhzHVfHemGgUgvyxcTe',
				clientDataJSON:
					'eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiZ0RiZjVJQ0l2M2JJTV9jcEdhSHZsdyIsIm9yaWdpbiI6Imh0dHA6Ly9sb2NhbGhvc3Q6NDUwNyIsImNyb3NzT3JpZ2luIjpmYWxzZX0',
				authenticatorData:
					'SZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAAQECAwQFBgcIAQIDBAUGBwgAIKlBdNw6g4fCpuwlK0FDius666Zu_RCDkd9QzA7RFvcRpAEBAycgBiFYIC-5opYfrW8rlwsAgbYCMQoGQOhzHVfHemGgUgvyxcTe',
				publicKey:
					'MCowBQYDK2VwAyEAL7milh-tbyuXCwCBtgIxCgZA6HMdV8d6YaBSC_LFxN4',
				publicKeyAlgorithm: -8,
				transports: ['internal'],
			},
			authenticatorAttachment: 'platform',
			clientExtensionResults: {},
			type: 'public-key',
		},
		'from a `PublicKeyCredential` (`navigator.credentials.create` return value)',
	)
	t.deepEqual(
		attestationToJSON({
			id: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			rawId: new Uint8Array([
				0xa9, 0x41, 0x74, 0xdc, 0x3a, 0x83, 0x87, 0xc2, 0xa6, 0xec,
				0x25, 0x2b, 0x41, 0x43, 0x8a, 0xeb, 0x3a, 0xeb, 0xa6, 0x6e,
				0xfd, 0x10, 0x83, 0x91, 0xdf, 0x50, 0xcc, 0x0e, 0xd1, 0x16,
				0xf7, 0x11,
			]),
			response: {
				attestationObject: new Uint8Array([
					0xa3, 0x63, 0x66, 0x6d, 0x74, 0x64, 0x6e, 0x6f, 0x6e, 0x65,
					0x67, 0x61, 0x74, 0x74, 0x53, 0x74, 0x6d, 0x74, 0xa0, 0x68,
					0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x58, 0x81,
					0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68, 0x74, 0x34,
					0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b, 0x8f, 0xe4, 0xae, 0xb9,
					0xa2, 0x86, 0x32, 0xc7, 0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d,
					0x97, 0x63, 0x45, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x03,
					0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04, 0x05,
					0x06, 0x07, 0x08, 0x00, 0x20, 0xa9, 0x41, 0x74, 0xdc, 0x3a,
					0x83, 0x87, 0xc2, 0xa6, 0xec, 0x25, 0x2b, 0x41, 0x43, 0x8a,
					0xeb, 0x3a, 0xeb, 0xa6, 0x6e, 0xfd, 0x10, 0x83, 0x91, 0xdf,
					0x50, 0xcc, 0x0e, 0xd1, 0x16, 0xf7, 0x11, 0xa4, 0x01, 0x01,
					0x03, 0x27, 0x20, 0x06, 0x21, 0x58, 0x20, 0x2f, 0xb9, 0xa2,
					0x96, 0x1f, 0xad, 0x6f, 0x2b, 0x97, 0x0b, 0x00, 0x81, 0xb6,
					0x02, 0x31, 0x0a, 0x06, 0x40, 0xe8, 0x73, 0x1d, 0x57, 0xc7,
					0x7a, 0x61, 0xa0, 0x52, 0x0b, 0xf2, 0xc5, 0xc4, 0xde,
				]),
				clientDataJSON: new Uint8Array([
					0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x77,
					0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x63, 0x72,
					0x65, 0x61, 0x74, 0x65, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x61,
					0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x67,
					0x44, 0x62, 0x66, 0x35, 0x49, 0x43, 0x49, 0x76, 0x33, 0x62,
					0x49, 0x4d, 0x5f, 0x63, 0x70, 0x47, 0x61, 0x48, 0x76, 0x6c,
					0x77, 0x22, 0x2c, 0x22, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
					0x22, 0x3a, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
					0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a,
					0x34, 0x35, 0x30, 0x37, 0x22, 0x2c, 0x22, 0x63, 0x72, 0x6f,
					0x73, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x3a,
					0x66, 0x61, 0x6c, 0x73, 0x65, 0x7d,
				]),
				authenticatorData: new Uint8Array([
					0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68, 0x74, 0x34,
					0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b, 0x8f, 0xe4, 0xae, 0xb9,
					0xa2, 0x86, 0x32, 0xc7, 0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d,
					0x97, 0x63, 0x45, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x03,
					0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04, 0x05,
					0x06, 0x07, 0x08, 0x00, 0x20, 0xa9, 0x41, 0x74, 0xdc, 0x3a,
					0x83, 0x87, 0xc2, 0xa6, 0xec, 0x25, 0x2b, 0x41, 0x43, 0x8a,
					0xeb, 0x3a, 0xeb, 0xa6, 0x6e, 0xfd, 0x10, 0x83, 0x91, 0xdf,
					0x50, 0xcc, 0x0e, 0xd1, 0x16, 0xf7, 0x11, 0xa4, 0x01, 0x01,
					0x03, 0x27, 0x20, 0x06, 0x21, 0x58, 0x20, 0x2f, 0xb9, 0xa2,
					0x96, 0x1f, 0xad, 0x6f, 0x2b, 0x97, 0x0b, 0x00, 0x81, 0xb6,
					0x02, 0x31, 0x0a, 0x06, 0x40, 0xe8, 0x73, 0x1d, 0x57, 0xc7,
					0x7a, 0x61, 0xa0, 0x52, 0x0b, 0xf2, 0xc5, 0xc4, 0xde,
				]),
				publicKey: new Uint8Array([
					0x30, 0x2a, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x70, 0x03,
					0x21, 0x00, 0x2f, 0xb9, 0xa2, 0x96, 0x1f, 0xad, 0x6f, 0x2b,
					0x97, 0x0b, 0x00, 0x81, 0xb6, 0x02, 0x31, 0x0a, 0x06, 0x40,
					0xe8, 0x73, 0x1d, 0x57, 0xc7, 0x7a, 0x61, 0xa0, 0x52, 0x0b,
					0xf2, 0xc5, 0xc4, 0xde,
				]),
				publicKeyAlgorithm: -8,
				transports: ['internal'],
			},
			authenticatorAttachment: 'platform',
			clientExtensionResults: {},
			type: 'public-key',
		}),
		{
			id: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			rawId: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			response: {
				attestationObject:
					'o2NmbXRkbm9uZWdhdHRTdG10oGhhdXRoRGF0YViBSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAAQECAwQFBgcIAQIDBAUGBwgAIKlBdNw6g4fCpuwlK0FDius666Zu_RCDkd9QzA7RFvcRpAEBAycgBiFYIC-5opYfrW8rlwsAgbYCMQoGQOhzHVfHemGgUgvyxcTe',
				clientDataJSON:
					'eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiZ0RiZjVJQ0l2M2JJTV9jcEdhSHZsdyIsIm9yaWdpbiI6Imh0dHA6Ly9sb2NhbGhvc3Q6NDUwNyIsImNyb3NzT3JpZ2luIjpmYWxzZX0',
				authenticatorData:
					'SZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAAQECAwQFBgcIAQIDBAUGBwgAIKlBdNw6g4fCpuwlK0FDius666Zu_RCDkd9QzA7RFvcRpAEBAycgBiFYIC-5opYfrW8rlwsAgbYCMQoGQOhzHVfHemGgUgvyxcTe',
				publicKey:
					'MCowBQYDK2VwAyEAL7milh-tbyuXCwCBtgIxCgZA6HMdV8d6YaBSC_LFxN4',
				publicKeyAlgorithm: -8,
				transports: ['internal'],
			},
			authenticatorAttachment: 'platform',
			clientExtensionResults: {},
			type: 'public-key',
		},
		'from a JSON representation (`attestationFromJSON` return value)',
	)
	t.end()
})

test('`attestationFromJSON`', (t) => {
	t.deepEqual(
		attestationFromJSON({
			id: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			rawId: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			response: {
				attestationObject:
					'o2NmbXRkbm9uZWdhdHRTdG10oGhhdXRoRGF0YViBSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAAQECAwQFBgcIAQIDBAUGBwgAIKlBdNw6g4fCpuwlK0FDius666Zu_RCDkd9QzA7RFvcRpAEBAycgBiFYIC-5opYfrW8rlwsAgbYCMQoGQOhzHVfHemGgUgvyxcTe',
				clientDataJSON:
					'eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiZ0RiZjVJQ0l2M2JJTV9jcEdhSHZsdyIsIm9yaWdpbiI6Imh0dHA6Ly9sb2NhbGhvc3Q6NDUwNyIsImNyb3NzT3JpZ2luIjpmYWxzZX0',
				authenticatorData:
					'SZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAAQECAwQFBgcIAQIDBAUGBwgAIKlBdNw6g4fCpuwlK0FDius666Zu_RCDkd9QzA7RFvcRpAEBAycgBiFYIC-5opYfrW8rlwsAgbYCMQoGQOhzHVfHemGgUgvyxcTe',
				publicKey:
					'MCowBQYDK2VwAyEAL7milh-tbyuXCwCBtgIxCgZA6HMdV8d6YaBSC_LFxN4',
				publicKeyAlgorithm: -8,
				transports: ['internal'],
			},
			authenticatorAttachment: 'platform',
			clientExtensionResults: {},
			type: 'public-key',
		}),
		{
			id: 'qUF03DqDh8Km7CUrQUOK6zrrpm79EIOR31DMDtEW9xE',
			rawId: new Uint8Array([
				0xa9, 0x41, 0x74, 0xdc, 0x3a, 0x83, 0x87, 0xc2, 0xa6, 0xec,
				0x25, 0x2b, 0x41, 0x43, 0x8a, 0xeb, 0x3a, 0xeb, 0xa6, 0x6e,
				0xfd, 0x10, 0x83, 0x91, 0xdf, 0x50, 0xcc, 0x0e, 0xd1, 0x16,
				0xf7, 0x11,
			]),
			response: {
				attestationObject: new Uint8Array([
					0xa3, 0x63, 0x66, 0x6d, 0x74, 0x64, 0x6e, 0x6f, 0x6e, 0x65,
					0x67, 0x61, 0x74, 0x74, 0x53, 0x74, 0x6d, 0x74, 0xa0, 0x68,
					0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x58, 0x81,
					0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68, 0x74, 0x34,
					0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b, 0x8f, 0xe4, 0xae, 0xb9,
					0xa2, 0x86, 0x32, 0xc7, 0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d,
					0x97, 0x63, 0x45, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x03,
					0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04, 0x05,
					0x06, 0x07, 0x08, 0x00, 0x20, 0xa9, 0x41, 0x74, 0xdc, 0x3a,
					0x83, 0x87, 0xc2, 0xa6, 0xec, 0x25, 0x2b, 0x41, 0x43, 0x8a,
					0xeb, 0x3a, 0xeb, 0xa6, 0x6e, 0xfd, 0x10, 0x83, 0x91, 0xdf,
					0x50, 0xcc, 0x0e, 0xd1, 0x16, 0xf7, 0x11, 0xa4, 0x01, 0x01,
					0x03, 0x27, 0x20, 0x06, 0x21, 0x58, 0x20, 0x2f, 0xb9, 0xa2,
					0x96, 0x1f, 0xad, 0x6f, 0x2b, 0x97, 0x0b, 0x00, 0x81, 0xb6,
					0x02, 0x31, 0x0a, 0x06, 0x40, 0xe8, 0x73, 0x1d, 0x57, 0xc7,
					0x7a, 0x61, 0xa0, 0x52, 0x0b, 0xf2, 0xc5, 0xc4, 0xde,
				]),
				clientDataJSON: new Uint8Array([
					0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x77,
					0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x63, 0x72,
					0x65, 0x61, 0x74, 0x65, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x61,
					0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x67,
					0x44, 0x62, 0x66, 0x35, 0x49, 0x43, 0x49, 0x76, 0x33, 0x62,
					0x49, 0x4d, 0x5f, 0x63, 0x70, 0x47, 0x61, 0x48, 0x76, 0x6c,
					0x77, 0x22, 0x2c, 0x22, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
					0x22, 0x3a, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
					0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a,
					0x34, 0x35, 0x30, 0x37, 0x22, 0x2c, 0x22, 0x63, 0x72, 0x6f,
					0x73, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x3a,
					0x66, 0x61, 0x6c, 0x73, 0x65, 0x7d,
				]),
				authenticatorData: new Uint8Array([
					0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68, 0x74, 0x34,
					0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b, 0x8f, 0xe4, 0xae, 0xb9,
					0xa2, 0x86, 0x32, 0xc7, 0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d,
					0x97, 0x63, 0x45, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x03,
					0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04, 0x05,
					0x06, 0x07, 0x08, 0x00, 0x20, 0xa9, 0x41, 0x74, 0xdc, 0x3a,
					0x83, 0x87, 0xc2, 0xa6, 0xec, 0x25, 0x2b, 0x41, 0x43, 0x8a,
					0xeb, 0x3a, 0xeb, 0xa6, 0x6e, 0xfd, 0x10, 0x83, 0x91, 0xdf,
					0x50, 0xcc, 0x0e, 0xd1, 0x16, 0xf7, 0x11, 0xa4, 0x01, 0x01,
					0x03, 0x27, 0x20, 0x06, 0x21, 0x58, 0x20, 0x2f, 0xb9, 0xa2,
					0x96, 0x1f, 0xad, 0x6f, 0x2b, 0x97, 0x0b, 0x00, 0x81, 0xb6,
					0x02, 0x31, 0x0a, 0x06, 0x40, 0xe8, 0x73, 0x1d, 0x57, 0xc7,
					0x7a, 0x61, 0xa0, 0x52, 0x0b, 0xf2, 0xc5, 0xc4, 0xde,
				]),
				publicKey: new Uint8Array([
					0x30, 0x2a, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x70, 0x03,
					0x21, 0x00, 0x2f, 0xb9, 0xa2, 0x96, 0x1f, 0xad, 0x6f, 0x2b,
					0x97, 0x0b, 0x00, 0x81, 0xb6, 0x02, 0x31, 0x0a, 0x06, 0x40,
					0xe8, 0x73, 0x1d, 0x57, 0xc7, 0x7a, 0x61, 0xa0, 0x52, 0x0b,
					0xf2, 0xc5, 0xc4, 0xde,
				]),
				publicKeyAlgorithm: -8,
				transports: ['internal'],
			},
			authenticatorAttachment: 'platform',
			clientExtensionResults: {},
			type: 'public-key',
		},
	)
	t.end()
})
